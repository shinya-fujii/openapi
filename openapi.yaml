openapi: 3.1.1
info:
  title: Manage Docs
  description: |-
    社内向けドキュメント管理システムのAPIの仕様
  version: 1.0.0
servers:
  - url: http://localhost/api/v1
paths:
    /organizations/{organization_id}/articles:
      post:
        summary: 記事作成
        tags:
          - Articles
        security:
          - BearerAuth: []
        parameters:
          - name: organization_id
            in: path
            required: true
            schema:
              type: string
              format: uuid
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostArticleRequest'
        responses:
          '201':
            description: Created
            headers:
              Location:
                schema:
                  type: string
                  format: uri
                description: 作成された記事のURL
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: 登録された記事のID
                      example: "aa687d47-b976-4a9a-87cc-19ec205c3ff9"
          '400':
            description: Bad Request
          '401':
            description: Unauthorized
          '404':
            description: Not found
          '403':
            description: Forbidden
          '500':
            description: Internal Server Error
    /articles/search:
      post:
        summary: 記事一覧取得
        tags:
          - Articles
        security:
          - BearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostArticleSearchRequest'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    articles:
                      type: array
                      items:
                        $ref: '#/components/schemas/ArticleOverviewResponse'
                    counts:
                      type: integer
                      description: 条件に一致する記事の総件数
                      example: 214
          '401':
            description: Unauthorized
          '404':
            description: Not found
          '500':
            description: Internal Server Error
    /articles/{article_id}:
      get:
        summary: 記事詳細取得
        tags:
          - Articles
        security:
          - BearerAuth: []
        parameters:
          - name: article_id
            in: path
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ArticleDetailResponse'
          '401':
            description: Unauthorized
          '404':
            description: Not found
          '403':
            description: Forbidden
          '500':
            description: Internal Server Error
      put:
        summary: 記事更新
        tags:
          - Articles
        security:
          - BearerAuth: []
        parameters:
          - name: article_id
            in: path
            required: true
            schema:
              type: string
              format: uuid
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutArticleRequest'
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
          '401':
            description: Unauthorized
          '404':
            description: Not found
          '403':
            description: Forbidden
          '500':
            description: Internal Server Error
      delete:
        summary: 記事削除
        tags:
          - Articles
        security:
          - BearerAuth: []
        parameters:
          - name: article_id
            in: path
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '204':
            description: No Content
          '401':
            description: Unauthorized
          '404':
            description: Not found
          '403':
            description: Forbidden
          '500':
            description: Internal Server Error
    /articles/{article_id}/visibility:
      put:
        summary: 記事公開状態更新
        tags:
          - Articles
        security:
          - BearerAuth: []
        parameters:
          - name: article_id
            in: path
            required: true
            schema:
              type: string
              format: uuid
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutArticleVisibilityRequest'
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
          '401':
            description: Unauthorized
          '404':
            description: Not found
          '403':
            description: Forbidden
          '500':
            description: Internal Server Error
components:
  schemas:
    ArticleOverviewResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 記事のID
          example: "aa687d47-b976-4a9a-87cc-19ec205c3ff9"
        title:
          type: string
          description: 記事のタイトル
          example: "タイトル"
        summary:
          type: string
          description: 記事の概要
          example: "概要"
        owner_id:
          type: string
          format: uuid
          description: 記事の投稿者のID
          example: "32faad36-7439-436e-bf93-9ea412e6b131"
        owner_name:
          type: string
          description: 記事の投稿者の名前
          example: "山田 太郎"
        owner_icon_url:
          type: string
          format: uri
          description: 記事の投稿者のアイコン画像URL
          example: "https://example.com/avatar.png"
        registered_timestamp:
          type: string
          format: date-time
          description: 記事の登録日時
          example: "2023-10-01T12:34:56Z"
    ArticleDetailResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 記事のID
          example: "aa687d47-b976-4a9a-87cc-19ec205c3ff9"
        title:
          type: string
          description: 記事のタイトル
          example: "タイトル"
        content:
          type: string
          description: 記事の内容（Markdown形式）
          example: "# 見出し\n\n本文..."
        owner_id:
          type: string
          format: uuid
          description: 記事の投稿者のID
          example: "32faad36-7439-436e-bf93-9ea412e6b131"
        owner_name:
          type: string
          description: 記事の投稿者の名前
          example: "山田 太郎"
        owner_icon_url:
          type: string
          format: uri
          description: 記事の投稿者のアイコン画像URL
          example: "https://example.com/avatar.png"
        visibility:
          type: string
          description: 記事の公開状態
          example: "public"
        registered_timestamp:
          type: string
          format: date-time
          description: 記事の登録日時
          example: "2023-10-01T12:34:56Z"
        last_updated_timestamp:
          type: string
          format: date-time
          description: 記事の最終更新日時
          example: "2023-10-02T14:20:00Z"
    PostArticleRequest:
      type: object
      properties:
        title:
          type: string
          description: 記事のタイトル
          example: "タイトル"
        content:
          type: string
          description: 記事の内容（Markdown形式）
          example: "# 見出し\n\n本文..."
    PutArticleRequest:
      type: object
      properties:
        title:
          type: string
          description: 記事のタイトル
          example: "新しいタイトル"
        content:
          type: string
          description: 記事の内容（Markdown形式）
          example: "# 新しい見出し\n\n新しい本文..."
    PutArticleVisibilityRequest:
      type: object
      properties:
        visibility:
          type: string
          description: 記事の公開状態
          enum:
            - draft
            - public
          example: "public"
    PostArticleSearchRequest:
      type: object
      properties:
        filter:
          type: object
          properties:
            query:
              type: string
              description: 検索クエリ
              example: "検索するよ"
            target_authors:
              type: array
              items:
                type: string
                format: uuid
              description: 検索対象の投稿者ID一覧
              example: ["32faad36-7439-436e-bf93-9ea412e6b131", "e1cbbf4e-8f4b-4d2a-9c3a-5f6e7d8c9b0a"]
            registered_at:
              type: object
              properties:
                from:
                  type: string
                  format: date-time
                  description: 登録日時の開始範囲
                  example: "2023-10-01T00:00:00Z"
                to:
                  type: string
                  format: date-time
                  description: 登録日時の終了範囲
                  example: "2023-10-31T23:59:59Z"
            last_updated_at:
              type: object
              properties:
                from:
                  type: string
                  format: date-time
                  description: 最終更新日時の開始範囲
                  example: "2023-10-01T00:00:00Z"
                to:
                  type: string
                  format: date-time
                  description: 最終更新日時の終了範囲
                  example: "2023-10-31T23:59:59Z"
        slice:
          type: object
          properties:
            limit:
              type: integer
              description: 取得件数の上限
              example: 20
            offset:
              type: integer
              description: 取得開始位置
              example: 0
        sort:
          type: object
          properties:
            registered_at:
              type: string
              enum:
                - asc
                - desc
              default: desc
              description: 登録日時の並び順
            last_updated_at:
              type: string
              enum:
                - asc
                - desc
              default: desc
              description: 最終更新日時の並び順
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWTトークンによる認証

  
